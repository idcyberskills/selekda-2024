const express = require('express');
const bcrypt = require('bcryptjs');
const db = require('../database/database'); 

const router = express.Router();

router.get('/register', (req, res) => {
  res.render('register', { error: null });
});

router.post('/register', (req, res) => {
  const { username, password } = req.body;

  const checkUser = 'SELECT * FROM users WHERE username = ?';
  db.get(checkUser, [username], (err, row) => {
    if (err) {
      return res.render('register', { error: 'Database error. Please try again.' });
    }
    if (row) {
      return res.render('register', { error: 'Username is already taken' });
    }

    bcrypt.hash(password, 10, (err, hashedPassword) => {
      if (err) {
        return res.render('register', { error: 'Error hashing password' });
      }

      const sql = 'INSERT INTO users (username, password) VALUES (?, ?)';
      db.run(sql, [username, hashedPassword], (err) => {
        if (err) {
          return res.render('register', { error: 'User registration failed. Please try again.' });
        }
        res.redirect('/auth/login'); 
      });
    });
  });
});

router.get('/login', (req, res) => {
  res.render('login', { error: null });
});

router.post('/login', (req, res) => {
  const { username, password } = req.body;

  const sql = 'SELECT * FROM users WHERE username = ?';
  db.get(sql, [username], (err, user) => {
    if (err) {
      return res.render('login', { error: 'Database error. Please try again.' });
    }
    if (!user) {
      return res.render('login', { error: 'User not found' });
    }

    bcrypt.compare(password, user.password, (err, isMatch) => {
      if (err) {
        return res.render('login', { error: 'Error comparing passwords' });
      }
      if (!isMatch) {
        return res.render('login', { error: 'Invalid credentials. Please try again.' });
      }

      req.session.user = { id: user.id, username: user.username };
      res.redirect('/'); 
    });
  });
});

router.get('/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      return res.send('Error logging out. Please try again.');
    }
    res.redirect('/auth/login');
  });
});

module.exports = router;
